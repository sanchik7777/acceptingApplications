import contextlib
import asyncio
from aiogram.types import ChatJoinRequest
from aiogram import Bot, Dispatcher, F
import logging
from background import keep_alive

BOT_TOKEN = '7551027634:AAENbSzLtmERfDRoBccUb0vsuMehvLVjP6g'
CHANNEL_ID = -1002184700377
ADMIN_ID = 7002244661
BATCH_SIZE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
DELAY_BETWEEN_BATCHES = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def process_batch(batch, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä—Ç–∏—é –∑–∞—è–≤–æ–∫.
    :param batch: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ ChatJoinRequest
    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    """
    tasks = []
    for chat_join in batch:
        tasks.append(approve_request(chat_join, bot))
    
    # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏
    await asyncio.gather(*tasks)

async def approve_request(chat_join: ChatJoinRequest, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    –∏–∑ URL –∏ –æ–¥–æ–±—Ä—è–µ—Ç –∑–∞—è–≤–∫—É.
    """
    msg = (
        f"<b>–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        f"–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ TikTok. –£–¥–µ–ª—è–π –æ—Ç 2 –¥–æ 6 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é, —Å–æ–∑–¥–∞–≤–∞—è –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Ç–µ–±–µ —Ç–µ–º—É. –ü—Ä–∏–±—ã–ª—å 50 –Ω–∞ 50. –ú—ã –Ω–µ –ø—Ä–æ–¥–∞–µ–º –∫—É—Ä—Å—ã, –∞ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏.\n\n"
        f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî @tiktok_partners. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, –ø–∏—à–∏ ‚Äì –º—ã –Ω–µ –∫—É—Å–∞–µ–º—Å—è üòÑ."
    )

    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_url = "https://cdn.discordapp.com/attachments/1224751404711673879/1316872219015774319/Group_4.jpg"

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await bot.send_photo(
            chat_id=chat_join.from_user.id,
            photo=image_url,
            caption=msg,
            parse_mode="HTML"
        )

        # –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        await chat_join.approve()
        logging.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç {chat_join.from_user.id} –æ–¥–æ–±—Ä–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}", exc_info=True)
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏ –æ—Ç {chat_join.from_user.id}: {e}"
        )

async def start():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞."""
    logging.basicConfig(
        level=logging.DEBUG,
        format="%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d) - %(message)s"
    )

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    # –û—á–µ—Ä–µ–¥—å –∑–∞—è–≤–æ–∫
    pending_requests = []

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫
    @dp.chat_join_request.register(F.chat.id == CHANNEL_ID)
    async def handle_request(chat_join: ChatJoinRequest):
        nonlocal pending_requests
        pending_requests.append(chat_join)

    async def process_requests():
        nonlocal pending_requests
        while True:
            if pending_requests:
                batch = pending_requests[:BATCH_SIZE]
                pending_requests = pending_requests[BATCH_SIZE:]

                await process_batch(batch, bot)
                await asyncio.sleep(DELAY_BETWEEN_BATCHES)
            else:
                await asyncio.sleep(0.5)

    try:
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª polling...")
        asyncio.create_task(process_requests())  # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as ex:
        logging.error(f"[Exception] - {ex}", exc_info=True)
    finally:
        await bot.session.close()

keep_alive()
if __name__ == '__main__':
    with contextlib.suppress(KeyboardInterrupt, SystemExit):
        asyncio.run(start())
